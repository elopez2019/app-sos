{"version":3,"sources":["./src/app/registro/registro.module.ts","./src/app/registro/registro.page.ts","./src/app/registro/registro.page.scss","./src/app/registro/registro.page.html"],"names":[],"mappings":"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","file":"src_app_registro_registro_module_ts.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { RegistroPage } from './registro.page';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    RouterModule.forChild([\n      {\n        path: '',\n        component: RegistroPage\n      }\n    ])\n  ],\n  declarations: [RegistroPage]\n})\nexport class RegistroPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword } from 'firebase/auth';\nimport { Router } from '@angular/router';\nimport { getFirestore, doc, setDoc } from 'firebase/firestore';\n\n\n@Component({\n  selector: 'app-registro',\n  templateUrl: './registro.page.html',\n  styleUrls: ['./registro.page.scss'],\n})\nexport class RegistroPage implements OnInit {\n  registroForm: FormGroup;\n  loginForm: FormGroup;\n  isRegistering: boolean = true;  // Bandera para alternar entre registro e inicio de sesión\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router\n  ) {\n    // Formulario de registro\n    this.registroForm = this.formBuilder.group({\n      name: ['', [Validators.required, Validators.minLength(2)]],\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n      confirmPassword: ['', [Validators.required]],\n    });\n\n    // Formulario de inicio de sesión\n    this.loginForm = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required]],\n    });\n  }\n\n  ngOnInit() {}\n\n  // Función para alternar entre formulario de registro e inicio de sesión\n  toggleForm() {\n    this.isRegistering = !this.isRegistering;\n  }\n\n  // Registro de usuario\n  onRegister() {\n    if (this.registroForm.invalid) {\n      return;\n    }\n\n    const { name, email, password, confirmPassword } = this.registroForm.value;\n\n    // Verificar que las contraseñas coincidan\n    if (password !== confirmPassword) {\n      alert('Las contraseñas no coinciden');\n      return;\n    }\n\n    const auth = getAuth();\n    const db = getFirestore(); // Instancia de Firestore\n\n    createUserWithEmailAndPassword(auth, email, password)\n      .then(async (userCredential) => {\n        const user = userCredential.user;\n\n        // Guardar datos adicionales en Firestore, incluyendo el nombre\n        await setDoc(doc(db, 'users', user.uid), {\n          name, // Guarda el nombre del usuario\n          email,\n          userId: user.uid,\n        });\n\n        console.log('Usuario registrado y datos guardados en Firestore:', user);\n        this.router.navigate(['/tabs/tab1']); // Redirigir al home\n      })\n      .catch((error) => {\n        console.error('Error al registrar usuario:', error.message);\n        alert('Error al registrar usuario: ' + error.message);\n      });\n  }\n\n\n  // Iniciar sesión\n  onLogin() {\n    if (this.loginForm.invalid) {\n      return;\n    }\n\n    const { email, password } = this.loginForm.value;\n\n    const auth = getAuth();\n    signInWithEmailAndPassword(auth, email, password)\n      .then((userCredential) => {\n        const user = userCredential.user;\n        console.log('Usuario inició sesión:', user);\n        this.router.navigate(['/tabs/tab1']); // Redirigir al home\n      })\n      .catch((error) => {\n        console.error('Error al iniciar sesión:', error.message);\n        alert('Error al iniciar sesión: ' + error.message);\n      });\n  }\n\n}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJyZWdpc3Ryby5wYWdlLnNjc3MifQ== */\";","export default \"<ion-header [translucent]=\\\"true\\\">\\n  <ion-toolbar>\\n    <ion-title>\\n      Registro / Iniciar Sesión\\n    </ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content [fullscreen]=\\\"true\\\">\\n  <form *ngIf=\\\"isRegistering\\\" [formGroup]=\\\"registroForm\\\" (ngSubmit)=\\\"onRegister()\\\" novalidate>\\n    <ion-item lines=\\\"full\\\">\\n      <ion-label position=\\\"floating\\\">Nombre</ion-label>\\n      <ion-input formControlName=\\\"name\\\" type=\\\"text\\\"></ion-input>\\n    </ion-item>\\n\\n    <ion-item lines=\\\"full\\\">\\n      <ion-label position=\\\"floating\\\">Correo Electrónico</ion-label>\\n      <ion-input formControlName=\\\"email\\\" type=\\\"email\\\"></ion-input>\\n    </ion-item>\\n\\n    <ion-item lines=\\\"full\\\">\\n      <ion-label position=\\\"floating\\\">Contraseña</ion-label>\\n      <ion-input formControlName=\\\"password\\\" type=\\\"password\\\"></ion-input>\\n    </ion-item>\\n\\n    <ion-item lines=\\\"full\\\">\\n      <ion-label position=\\\"floating\\\">Confirmar Contraseña</ion-label>\\n      <ion-input formControlName=\\\"confirmPassword\\\" type=\\\"password\\\"></ion-input>\\n    </ion-item>\\n\\n    <ion-button expand=\\\"full\\\" type=\\\"submit\\\" color=\\\"primary\\\">Registrar</ion-button>\\n  </form>\\n\\n  <form *ngIf=\\\"!isRegistering\\\" [formGroup]=\\\"loginForm\\\" (ngSubmit)=\\\"onLogin()\\\" novalidate>\\n    <ion-item lines=\\\"full\\\">\\n      <ion-label position=\\\"floating\\\">Correo Electrónico</ion-label>\\n      <ion-input formControlName=\\\"email\\\" type=\\\"email\\\"></ion-input>\\n    </ion-item>\\n\\n    <ion-item lines=\\\"full\\\">\\n      <ion-label position=\\\"floating\\\">Contraseña</ion-label>\\n      <ion-input formControlName=\\\"password\\\" type=\\\"password\\\"></ion-input>\\n    </ion-item>\\n\\n    <ion-button expand=\\\"full\\\" type=\\\"submit\\\" color=\\\"primary\\\">Iniciar Sesión</ion-button>\\n  </form>\\n\\n  <ion-button expand=\\\"full\\\" color=\\\"light\\\" (click)=\\\"toggleForm()\\\">\\n    {{ isRegistering ? 'Ya tienes cuenta? Iniciar sesión' : 'No tienes cuenta? Regístrate' }}\\n  </ion-button>\\n\\n  <ion-spinner *ngIf=\\\"loading\\\"></ion-spinner>\\n\\n</ion-content>\\n\";"],"sourceRoot":"webpack:///"}